name: Build & Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up QEMU (for multiâ€‘arch, optional)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker (optional, if you push to Docker Hub)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t my-python-app:${{ github.run_number }} .

      - name: Save Docker image as TAR
        run: |
          docker save -o app.tar my-python-app:${{ github.run_number }}

      - name: Copy image TAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "app.tar"
          target: "/home/ec2-user/app.tar"

      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            #!/bin/bash
            set -e

            # Import image into containerd (k3s)
            sudo ctr --namespace k8s.io images import /home/ec2-user/app.tar

            # Stop & remove existing container (falls vorhanden)
            if docker ps -q --filter "name=my-python-app"; then
              docker rm -f my-python-app
            fi

            # Run new container
            docker run -d \
              --name my-python-app \
              -p 80:80 \
              my-python-app:${{ github.run_number }}


name: CI/CD → Produktion

# Datei: .github/workflows/deploy.yml
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    name: Build & Deploy to Production
    runs-on: ubuntu-latest

    steps:
      # 1. Code auschecken
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Docker‑Image bauen
      #- name: Build Docker Image
      #  run: |
      #    IMAGE_TAG=${{ github.sha }}
      #   echo "Building image my-app:$IMAGE_TAG"
      #    docker build -t my-app:$IMAGE_TAG .
      
      - name: Build Docker Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          echo "Building image my-app:$IMAGE_TAG"
          docker build -t my-app:$IMAGE_TAG .

      # 3. Image als TAR exportieren
      - name: Save Image to Tar
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker save my-app:$IMAGE_TAG -o my-app_$IMAGE_TAG.tar
          ls -lh my-app_$IMAGE_TAG.tar

      # 4. SSH‑Key für EC2 anlegen
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # 5. Tar & Helm‑Chart auf EC2 kopieren
      - name: Copy artifacts to EC2
        run: |
          IMAGE_TAG=${{ github.sha }}
          scp -o StrictHostKeyChecking=no \
            my-app_$IMAGE_TAG.tar \
            -r charts/my-app \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/deploy/

      # 6. Auf EC2: Image laden & Helm‑Upgrade ausführen
      - name: Load Image & Helm Upgrade on EC2
        run: |
          IMAGE_TAG=${{ github.sha }}
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            cd ~/deploy

            echo "Loading Docker image my-app:$IMAGE_TAG"
            docker load -i my-app_$IMAGE_TAG.tar

            echo "Export KUBECONFIG for k3s"
            export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

            echo "Deploying via Helm to namespace production"
            helm upgrade --install my-app ./my-app \
              --namespace production \
              --create-namespace \
              --set image.tag=$IMAGE_TAG \
              --wait

            echo "Deployment complete"
          EOF

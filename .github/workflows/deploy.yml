name: CI/CD → Produktion

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    name: Build & Deploy to Production
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.sha }}

    steps:
      # 1. Code auschecken
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Docker‑Image bauen
      - name: Build Docker Image
        run: |
          echo "Building image my-app:${IMAGE_TAG}"
          docker build -t my-app:${IMAGE_TAG} .

      # 3. Image als TAR exportieren
      - name: Save Image to Tar
        run: |
          echo "Saving Docker image to my-app_${IMAGE_TAG}.tar"
          docker save my-app:${IMAGE_TAG} -o my-app_${IMAGE_TAG}.tar

      # 4. Helm‑Chart als TAR packen
      - name: Package Helm Chart
        run: |
          tar czf my-app-chart.tar.gz -C charts/my-app .

      # 5. SSH‑Key für EC2 anlegen
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # 6. Artefakte auf EC2 kopieren
      - name: Copy artifacts to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p ~/deploy/my-app"
          scp -o StrictHostKeyChecking=no \
            my-app_${IMAGE_TAG}.tar \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/deploy/my-app/
          scp -o StrictHostKeyChecking=no \
            my-app-chart.tar.gz \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/deploy/my-app/

      # 7. Auf EC2: Image laden, Chart entpacken & Helm‑Upgrade in Clean-Dir
      - name: Load Image & Helm Upgrade on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<EOF
            set -e
            cd ~/deploy/my-app

            echo "Loading Docker image my-app:${IMAGE_TAG}"
            docker load -i my-app_${IMAGE_TAG}.tar

            echo "Creating clean release directory"
            rm -rf release
            mkdir release

            echo "Unpacking Helm chart into release/"
            tar xzf my-app-chart.tar.gz -C release

            echo "Deploying via Helm from release/ to namespace production"
            cd release
            sudo helm upgrade --install my-app . \
              --namespace production \
              --create-namespace \
              --kubeconfig /etc/rancher/k3s/k3s.yaml \
              --set image.tag=${IMAGE_TAG} \
              --wait

            echo "Deployment complete"
          EOF
